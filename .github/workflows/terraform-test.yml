name: Terraform Test

on:
  push:
    branches: [ main, infra/dev ]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-test.yml'

env:
  AWS_DEFAULT_REGION: ap-northeast-2
  TF_VERSION: 1.5.0
  GO_VERSION: 1.21

jobs:
  # 단위 테스트 (병렬 실행)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-dir: [kms, ec2]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Unit Tests - ${{ matrix.test-dir }}
      working-directory: infra/terraform/test/unit/${{ matrix.test-dir }}
      timeout-minutes: 45
      run: |
        go mod download
        # KMS 테스트 순차 실행 (-p 1)으로 AWS API 제한 방지
        go test -v -timeout 40m -p 1

  # 통합 테스트 (KMS 없이 - 안정적이고 빠름)
  integration-test-no-kms:
    name: Integration Test (No KMS)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-integration-tests'))
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Integration Test (No KMS)
      working-directory: infra/terraform/test/integration/kms_ec2
      run: |
        go mod download
        go test -v -timeout 45m -run TestEC2WithoutKMS
      env:
        TF_LOG: INFO

  # 완전한 통합 테스트 (KMS 포함 - 선택적 실행)
  integration-test-full:
    name: Integration Test (Full with KMS)
    runs-on: ubuntu-latest
    needs: unit-tests
    # 수동 트리거 또는 특정 라벨이 있을 때만 실행
    if: github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'run-full-integration-tests')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Full Integration Test (with KMS)
      working-directory: infra/terraform/test/integration/kms_ec2
      run: |
        go mod download
        go test -v -timeout 60m -run TestKubernetesClusterIntegration
      env:
        TF_LOG: INFO

  # 테스트 결과 요약
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-test-no-kms]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 테스트 결과 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 테스트 유형 | 상태 |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 단위 테스트 (KMS) | ${{ needs.unit-tests.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 단위 테스트 (EC2) | ${{ needs.unit-tests.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 통합 테스트 (KMS 없이) | ${{ needs.integration-test-no-kms.result == 'success' && '✅ 통과' || needs.integration-test-no-kms.result == 'skipped' && '⏭️ 건너뜀' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 참고사항" >> $GITHUB_STEP_SUMMARY
        echo "- **기본 통합 테스트**: KMS 없이 실행 (빠르고 안정적)" >> $GITHUB_STEP_SUMMARY
        echo "- **완전한 통합 테스트**: 수동 트리거 또는 'run-full-integration-tests' 라벨 필요" >> $GITHUB_STEP_SUMMARY
        echo "- **PR 통합 테스트**: 'run-integration-tests' 라벨 추가 시 실행" >> $GITHUB_STEP_SUMMARY 